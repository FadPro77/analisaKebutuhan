generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model menu {
  id            Int             @id @default(autoincrement())
  nama          String          @db.VarChar
  harga         Float
  kategori      String          @db.VarChar
  ketersediaan  Boolean         @default(true)
  image         String           @default("")
  pesanan_items pesanan_items[]
}

model payment {
  id             Int       @id @default(autoincrement())
  pesanan_id     Int       @unique
  metode         String    @db.VarChar
  status         String    @db.VarChar
  transaksi_id   String?   @unique @db.VarChar
  jumlah         Float
  tanggal        DateTime? @default(now()) @db.Timestamp(6)

  
  snap_token     String?   @db.VarChar       
  midtrans_order_id String? @unique @db.VarChar 

  pesanan        pesanan   @relation(fields: [pesanan_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  saldo         saldo[]
}

model pengeluaran {
  id         Int         @id @default(autoincrement())
  keterangan String      @db.VarChar
  jumlah  Float

  saldo    saldo[]
}

model pesanan {
  id            Int             @id @default(autoincrement())
  status        String          @db.VarChar
  user_id       Int
  location_id   Int?             
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  payment       payment?
  users         users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  location      location?        @relation(fields: [location_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  pesanan_items pesanan_items[]
}

model pesanan_items {
  id         Int     @id @default(autoincrement())
  pesanan_id Int
  menu_id    Int
  jumlah     Int
  subtotal   Float
  menu       menu    @relation(fields: [menu_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  pesanan    pesanan @relation(fields: [pesanan_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model saldo {
  id         Int       @id @default(autoincrement())
  tipe       String    @db.VarChar
  jumlah     Float
  payment_id Int?
  pengeluaran_id Int?
  keterangan String?
  tanggal    DateTime? @default(now()) @db.Timestamp(6)
  payment    payment?  @relation(fields: [payment_id], references: [id], onUpdate: NoAction)
  pengeluaran    pengeluaran?  @relation(fields: [pengeluaran_id], references: [id], onUpdate: NoAction)
}

model location {
  id        Int      @id @default(autoincrement())
  address   String   @db.VarChar
  users     users[]  
  pesanan   pesanan[] 
}

model users {
  id            Int         @id @default(autoincrement())
  first_name    String      @db.VarChar
  last_name     String      @db.VarChar
  password      String      @db.VarChar
  phone         String      @db.VarChar
  email         String      @unique(map: "users_email_idx") @db.VarChar
  role_id       Int         @default(2)
  location_id   Int?        
  location      location?   @relation(fields: [location_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  pesanan       pesanan[]
}